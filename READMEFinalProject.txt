○	This README file should be either a .PDF file or a .TXT file.
○	This README file should explain each element of your code: each function, each class and its methods/what the constructor accepts as input, and what any additional mechanics/processing in your code do.
○	It should also include examples of how to run your code, an explanation of what the result / output of your code running ought to be, and an explanation of all dependencies / any modules that must be installed for it to run. This includes any that we have installed in the process of the course OR any new ones you have used.

●	The .py code file that contains your code, to run. (Tell us what it is called in your README!) 

Overview:

This code will accept three or more movie titles to fetch and cache data about each from the OMDB api. This data includes the movie_title, directors, IMDB_rating, run_time, number of languages, box office profit, and first star actor. It uses the first star actor of each of the movies to complete a twitter search on each of the actors and also cache this data. The information received and cached about each actor search is the tweet text, id of the user who posted it, the tweet’s number of favorites, and number of retweets. The program then looks at this list of tweets from the searches to find and cache data about each of the users who posted the tweets and who were mentioned in the tweets. A search is done on these users to find their screen name, number of favorites, description, and number of followers. All of this data is loaded into a database containing a Movies, Tweets, and Users tables, containing the respective information that was found, connected by user_id and  first_actor. This database is used to analyze the tweets by users with more than 1000 followers, because they have more social media visibility and influence. From these tweets, the most-mentioned user is determined, which aims to determine who is being most widely talked about and circulated in relation to these movies. 

Functions, Classes, and their methods:

The get_twitter_user_data function is used to fetch data from the internet and or cached data in json format about a particular twitter user, referenced either by screen name or user id. It is used in the program when there has been a compiled list of twitter user id’s containing both the id’s of mentioned users and users who posted the tweets. In line 348, it is called on each item of that list to accumulate a list of dictionaries in json format; it is created in this way, so TwitterUser class instances can be created for each of these user’s, using the returned dictionaries.

The get_omdb_data function takes a string as input, which should be a movie title and returns a json object containing information about the movie. If data has already been requested about a particular movie, it uses cached data; otherwise, it gets data from the internet and adds it to the cache file. This is used in a list comprehension on each element of the Movie_Titles list to create new list called movie_data_list of json objects associated with each movie title.

The Movie class is responsible for creating an instance of a particular movie, with easily accessible attributes, using a single son object about a particular movie that is generated by get_omdb_Data. It will have 7 instance variables assigned in the __init__ constructor. It is used in a list comprehension to create a new list of Movie class instances called movie_class_instances, using the movie_data_list dictionaries.

Its Movie __init__ constructor creates a class instance with 7 different attributes, which are the following: movie title, movie director, IMDB rating, first actor, run time, number of languages, and box office profit. It creates these instance variables by accessing various parts of the omdb json object and also employing regular expressions to isolate various parts of these json parts. 

The Movie __str__ constructor creates a printed form of the Movie instance, which will be printed in the following form: Movie title: {}, directed by {}, has a {} IMDB rating. Its first actor is {}, with a total run time of {} minutes. It contains {} languages and brought in a total of ${} in box office profits. Each of the instance variables are used to fill in these respective blank fields: self.movie_title, self.movie_director, self.movie_imdb_rating, self.actor, self.run_time, self.num_languages, self.box_office.

The Tweet class aids in completing a Twitter search of the first star actor, which is generated by the get_omdb_data function and stored in the Movie instance variable “actor.” Therefore, it takes in a Movie class instance variable actor as input, which should be a string. It allows a user to execute a Twitter search from the internet if the actor’s name has not been previously requested and otherwise uses data from the cache file. It has one constructor and one method. It is used in a list comprehension to create a new list called tweet_class_instances, by creating Tweet class instances out of each dictionary element in the movie_class_instances list. This is critical to the step where we fetch first star actor data.

The Tweet class’s __init__ constructor assigns the actor name string that it receives as input to the actor instance variable.

The Tweet class’s get_actor_data method takes no additional input and checks to see if there is already an existing key in the cache file associated with the actor’s name; if there is, it returns a json object from the cache file. If there is not, it pull a json object from the Twitter search API about the actor, caches the data, and returns it. It will be called on each of the Tweet class instances to create a list of tuples of the various actors’ data. 


The TwitterUser class takes a single dictionary returned from the get_actor_data function as input to create a TwitterUser instance, in which instance variables can be created based on attributes found within the json object. It has one constructor and no methods, because it only creates a way to make the attributes of a particular user distinct and accessible.

The TwitterUser class __init__ constructor uses the input dictionary to create 5 instance variables: user_id, screen name, number of that user’s favorites, the user’s description, and the user’s number of followers. These attributes are important for learning more about a given user. This project is specifically interested in social media influence, which is why number of followers is included. This constructor makes it easier to load data into a SQL table. This is because a single row that loads into the table would be: instance_tuple = instance.user_id, instance.screen_name, instance.num_favorites, instance.description, instance.followers. The dot operators here, made possible by the TwitterUser class make it very easy to understand which attributes are in use here. It is called in line 359 on every dictionary generated from get_twitter_user_data that was called on every user_id in line 348 to create TwitterUser Instances that make loading into a SQL table easier. 


Use of sets in the code: Line 303

In order to create a list of users mentioned in the tweets and users who posted the tweets returned from a search on the first star actor names, two separate sets called user_mentions and user_who_posted as created to ensure that no duplicates are created. 

An empty list called tweet_info_tuple_list_2 that will contain the tuples of tweet info is also initialized, because it will be created using tweet data from users where there are no duplicated, thanks to the use of sets above.
This tweet_info_tuple_list_2 iterates through data from the cache file to gather data about both the mentioned users and users who posted, in order to save the information we’re interested in saving for our Tweets table.

Creating the Database:

This code initializes three tables at the beginning of the file: Movies, Tweets, and Users, which are all connected by separate keys that allow various interesting things about the data to be revealed, processed, and presented to the program’s user in the form of an output file at the end of running the code.  

The Movies table contains the following column titles: ID (primary key), movie_title, directors, IMDB_rating, run_time, num_lang, box_office$, first_actor. Upon reading these titles, it makes sense why the Movie instance variables share very similar names; this was done to allow for the simple creation of iteration over Movie instances into tuples that could be loaded into the Movie table. 

The Users table contains the following column titles: user_id (primary key), screen_name, num_favorites, description, num_followers. Upon reading these titles, it makes sense why the TwitterUser class instance variables share very similar names; this was done to allow for the simple and comprehensive iteration over TwitterUser instances into tuples that could be loaded into the Users table. 

The Tweets table contains the following column titles: tweet_id, tweet_text, user_id, first_actor, num_favs, num_retweets, and makes sure to note that its user_id references the Users table user_id and its first_actor references the Movies table first_actor. This forms all of the connections among the tables. 


The output file:

An output file called “statsfile.txt” is generated to present the following information, by employing an inner join query of the database. It presents first summary stats about each movie, including its director, IMDB rating, first star actor, total run time, number of languages, and box office profits. Then, it grabs the text of tweets from users that have more than 1000 followers, which is interesting, because they will likely have the greatest number of views. It then uses list comprehension to create a list of those tweets, upon which the mentions are extracted using a regular expression. It also uses set comprehension to display all of the user_names mentioned with no duplicates. Then, from the collections library, a Counter is used to determine which screen name appears the most times. If there is a tie, it breaks the tie alphabetically. 

It will also display the text of the most popular tweets, which are tweets that have more than 1000 retweets.

Additionally, it will display a list of the search results’ most popular users, who each have more than 5000 favorited tweets total. The interest is again social media influence.


How to successfully run this code: 


1. Dependencies and directories
The following dependencies are required:
import itertools
import collections
import tweepy
import json 
import sqlite
*import omdb
import re
import itertools
*import twitter_info

*You must: pip install omdb for this code to run: https://media.readthedocs.org/pdf/omdbpy/latest/omdbpy.pdf
*You must : you must have a file that contains your tweepy authentication key and information within the same directory as this code file.


Have the following files located inside the same directory as the 206dataaccess.py file:
statsfile.txt
twitter_info.py


2. Running the file
IMPORTANT: The default movies for which data is found are: Frozen, Mean Girls, The Notebook, and Argo. You may change all of these titles, swap, and add as along as there are three titles for which data is found at all time. 

Run in Terminal with the command: python 206dataaccess.py
Result of running code: All you have to modify is the Movie_List variables to return the data of movies that you’re interested in.

3. What to expect after running the file

You should be able to view your database in si2016finalpoject.dub
You should have a new cache file called SI206_final_projet_cache.json
You should have an output file called statsfile.txt 

The output of this statsfile.txt should contain something like the following: 

Summary stats for the following movies: Frozen, Mean Girls, The Notebook, Argo on 4/20/2017
After searching twitter data about the first star actor of each of these movies, the text from tweets posted by the most influential users identified in the search (those with more than 1000 followers) were collected. 
Although all of the mentioned screen names within these tweets were: {'misestrelar', 'BeautyPostss', 'Farandula242', 'SpencerAlthouse'}
The most mentioned screen name of these screen names was: BeautyPostss

The most popular tweets, each with greater than 1000 retweets, were: 
RT @GG_quotes: Kristen Bell: Gossip Girl here

me: YOUR ONE AND ONLY SOURCE INTO THE SCANDALOUS LIVES OF MANHATTAN'S ELITE https://t.co/jSX…, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @BeautyPostss: never forget lindsay lohan's contour in her mugshot https://t.co/EdqHMFDnbn, RT @KellyannePolls: Congratulations to my friend &amp; fellow "Camden Girl" Kay Ivey...just sworn-in as Governor of Alabama. The second woman g…, RT @Mike_Uva: Breaking: Tim Tebow homers in his first at-bat. Are you kidding me? https://t.co/tzal9jtvyH, RT @rxlnd: Mark Wahlberg talking Ben Affleck into doing a movie about the Patriots and Aaron Hernandez's case. https://t.co/kPPzr36ITx, RT @rxlnd: Mark Wahlberg talking Ben Affleck into doing a movie about the Patriots and Aaron Hernandez's case. https://t.co/kPPzr36ITx

The most popular users, each with greater than 5000 favorited tweets total were: 
chrismoodycom, GutsGloryAbhi, katie_emmax, CaraotaDigital, idledixmonds, rooseob, Fxshion2Society, Zoe1o1Zoe, Tim_K_Long, tajaneebriscoe, SrujanaDeva, s0phiecamilleri, BeautyPostss, muhamedrefaay2, uhlani, stacistormy, southshawty, stoesselsalute


4. Questions and Bugs
Please contact me at sararama@umich.edu for further inquiries about this program.


